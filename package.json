{
  "name": "claude-autopilot",
  "displayName": "Claude Autopilot",
  "description": "Automated Claude Code assistant with smart task completion, queue management, and workflow automation for VS Code",
  "version": "3.6.0",
  "icon": "img/claude-autopilot.png",
  "engines": {
    "vscode": "^1.74.0",
    "node": ">=18.0.0"
  },
  "categories": [
    "Machine Learning",
    "Other"
  ],
  "main": "./out/extension.js",
  "activationEvents": [
    "onCommand:autoclaude.start"
  ],
  "contributes": {
    "commands": [
      {
        "command": "autoclaude.start",
        "title": "üöÄ Start Claude Assistant",
        "category": "Claude",
        "icon": "$(play)"
      },
      {
        "command": "autoclaude.stop",
        "title": "‚èπÔ∏è Stop Claude",
        "category": "Claude",
        "icon": "$(stop)"
      },
      {
        "command": "autoclaude.addMessage",
        "title": "üí¨ Ask Claude Something...",
        "category": "Claude",
        "icon": "$(comment-add)"
      },
      {
        "command": "autoclaude.runScriptChecks",
        "title": "üîç Run Quality Checks",
        "category": "Claude",
        "icon": "$(search)"
      },
      {
        "command": "autoclaude.runScriptLoop",
        "title": "üîÑ Auto-Fix Issues (Loop Mode)",
        "category": "Claude",
        "icon": "$(refresh)"
      },
      {
        "command": "autoclaude.quickStart",
        "title": "‚ö° Quick Start Guide",
        "category": "Claude",
        "icon": "$(rocket)"
      },
      {
        "command": "autoclaude.runSubAgents",
        "title": "ü§ñ Run Claude AI Agents",
        "category": "Claude",
        "icon": "$(hubot)"
      },
      {
        "command": "autoclaude.autoComplete",
        "title": "‚ú® Auto-Complete Current Task",
        "category": "Claude",
        "icon": "$(sparkle)"
      },
      {
        "command": "autoclaude.workflowWizard",
        "title": "üßô Claude Workflow Wizard",
        "category": "Claude",
        "icon": "$(list-tree)"
      },
      {
        "command": "autoclaude.executeCommand",
        "title": "üéØ Execute Claude Command",
        "category": "Claude",
        "icon": "$(terminal)"
      },
      {
        "command": "autoclaude.updateContext",
        "title": "üîÑ Update Project Context",
        "category": "Claude",
        "icon": "$(refresh)"
      },
      {
        "command": "autoclaude.showContext",
        "title": "üìã Show Project Context",
        "category": "Claude",
        "icon": "$(file-text)"
      },
      {
        "command": "autoclaude.showTasks",
        "title": "üìù Show Task History",
        "category": "Claude",
        "icon": "$(list-ordered)"
      },
      {
        "command": "autoclaude.startParallelAgents",
        "title": "üöÄ Start Parallel Agents",
        "category": "Claude Agent Farm",
        "icon": "$(rocket)"
      },
      {
        "command": "autoclaude.stopParallelAgents",
        "title": "‚èπÔ∏è Stop Parallel Agents",
        "category": "Claude Agent Farm",
        "icon": "$(stop)"
      },
      {
        "command": "autoclaude.showAgentMonitor",
        "title": "üìä Show Agent Monitor",
        "category": "Claude Agent Farm",
        "icon": "$(dashboard)"
      },
      {
        "command": "autoclaude.attachToAgents",
        "title": "üñ•Ô∏è Attach to Agent Session",
        "category": "Claude Agent Farm",
        "icon": "$(terminal)"
      },
      {
        "command": "autoclaude.clearAllAgentContext",
        "title": "üßπ Clear All Agent Context",
        "category": "Claude Agent Farm",
        "icon": "$(clear-all)"
      },
      {
        "command": "autoclaude.toggleAutoOrchestration",
        "title": "ü§ñ Toggle Auto-Orchestration (On/Off)",
        "category": "Claude Agent Farm",
        "icon": "$(circuit-board)"
      },
      {
        "command": "autoclaude.exportQueue",
        "title": "üì§ Export Queue",
        "category": "Claude",
        "icon": "$(export)"
      },
      {
        "command": "autoclaude.importQueue",
        "title": "üì• Import Queue",
        "category": "Claude",
        "icon": "$(import)"
      },
      {
        "command": "autoclaude.exportSettings",
        "title": "‚öôÔ∏è Export Settings",
        "category": "Claude",
        "icon": "$(save-as)"
      },
      {
        "command": "autoclaude.useTemplate",
        "title": "üìã Use Message Template",
        "category": "Claude",
        "icon": "$(file-text)"
      },
      {
        "command": "autoclaude.manageTemplates",
        "title": "üóÇÔ∏è Manage Message Templates",
        "category": "Claude",
        "icon": "$(library)"
      },
      {
        "command": "autoclaude.showStatistics",
        "title": "üìä Show Queue Statistics",
        "category": "Claude",
        "icon": "$(graph)"
      },
      {
        "command": "autoclaude.checkRemoteStatus",
        "title": "üåê Check Remote Environment",
        "category": "Claude",
        "icon": "$(remote)"
      },
      {
        "command": "autoclaude.showErrorHistory",
        "title": "üìã Show Error History",
        "category": "Claude",
        "icon": "$(list-unordered)"
      },
      {
        "command": "autoclaude.showServiceHealth",
        "title": "üíö Show Service Health",
        "category": "Claude",
        "icon": "$(pulse)"
      },
      {
        "command": "autoclaude.exportLogs",
        "title": "üìÑ Export Debug Logs",
        "category": "Claude",
        "icon": "$(export)"
      },
      {
        "command": "autoclaude.validateConfiguration",
        "title": "‚úÖ Validate Configuration",
        "category": "Claude",
        "icon": "$(check)"
      },
      {
        "command": "autoclaude.resetToDefaults",
        "title": "üîÑ Reset to Default Settings",
        "category": "Claude",
        "icon": "$(discard)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "autoclaude.start",
          "when": "true"
        },
        {
          "command": "autoclaude.stop",
          "when": "true"
        },
        {
          "command": "autoclaude.addMessage",
          "when": "true"
        },
        {
          "command": "autoclaude.runScriptChecks",
          "when": "true"
        },
        {
          "command": "autoclaude.runScriptLoop",
          "when": "true"
        },
        {
          "command": "autoclaude.quickStart",
          "when": "true"
        },
        {
          "command": "autoclaude.runSubAgents",
          "when": "true"
        },
        {
          "command": "autoclaude.autoComplete",
          "when": "true"
        },
        {
          "command": "autoclaude.workflowWizard",
          "when": "true"
        },
        {
          "command": "autoclaude.executeCommand",
          "when": "true"
        },
        {
          "command": "autoclaude.updateContext",
          "when": "true"
        },
        {
          "command": "autoclaude.showContext",
          "when": "true"
        },
        {
          "command": "autoclaude.showTasks",
          "when": "true"
        },
        {
          "command": "autoclaude.startParallelAgents",
          "when": "true"
        },
        {
          "command": "autoclaude.stopParallelAgents",
          "when": "true"
        },
        {
          "command": "autoclaude.showAgentMonitor",
          "when": "true"
        },
        {
          "command": "autoclaude.attachToAgents",
          "when": "true"
        },
        {
          "command": "autoclaude.clearAllAgentContext",
          "when": "true"
        },
        {
          "command": "autoclaude.toggleAutoOrchestration",
          "when": "true"
        }
      ],
      "explorer/context": [
        {
          "command": "autoclaude.runScriptChecks",
          "when": "explorerResourceIsFolder",
          "group": "autoclaude"
        },
        {
          "command": "autoclaude.autoComplete",
          "when": "explorerResourceIsFolder",
          "group": "autoclaude"
        }
      ],
      "editor/context": [
        {
          "command": "autoclaude.addMessage",
          "when": "editorTextFocus",
          "group": "autoclaude"
        }
      ]
    },
    "configuration": {
      "title": "AutoClaude",
      "properties": {
        "autoclaude.developmentMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable development mode with debug controls and testing features"
        },
        "autoclaude.queue.maxSize": {
          "type": "number",
          "default": 1000,
          "minimum": 10,
          "maximum": 10000,
          "description": "Maximum number of messages in queue before cleanup"
        },
        "autoclaude.queue.maxMessageSize": {
          "type": "number",
          "default": 50000,
          "minimum": 1000,
          "maximum": 1000000,
          "description": "Maximum size of individual message text (bytes)"
        },
        "autoclaude.queue.maxOutputSize": {
          "type": "number",
          "default": 100000,
          "minimum": 1000,
          "maximum": 1000000,
          "description": "Maximum size of message output (bytes)"
        },
        "autoclaude.queue.retentionHours": {
          "type": "number",
          "default": 24,
          "minimum": 1,
          "maximum": 168,
          "description": "Hours to keep completed messages before cleanup"
        },
        "autoclaude.session.autoStart": {
          "type": "boolean",
          "default": false,
          "description": "Automatically start Claude session when extension activates"
        },
        "autoclaude.session.skipPermissions": {
          "type": "boolean",
          "default": true,
          "description": "Skip Claude CLI permission prompts (use --dangerously-skip-permissions)"
        },
        "autoclaude.session.scheduledStartTime": {
          "type": "string",
          "default": "",
          "description": "Schedule session start at specific time (HH:MM format, e.g., '09:30'). Cannot be used with autoStart. Empty string disables scheduling.",
          "pattern": "^(([01]?[0-9]|2[0-3]):[0-5][0-9])?$"
        },
        "autoclaude.session.autoResumeUnfinishedTasks": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detect and continue unfinished tasks when Claude stops working. Analyzes output for TODOs, incomplete steps, and mid-task interruptions."
        },
        "autoclaude.session.aggressiveTaskDetection": {
          "type": "boolean",
          "default": false,
          "description": "Enable aggressive task detection mode. This will attempt to resume work even with low confidence indicators like partial TODO mentions or incomplete sentences. May result in more false positives."
        },
        "autoclaude.session.autoResumeDelay": {
          "type": "number",
          "default": 2000,
          "minimum": 0,
          "maximum": 10000,
          "description": "Delay in milliseconds before checking for unfinished tasks after Claude stops. Increase if Claude's output is being cut off during analysis."
        },
        "autoclaude.sleepPrevention.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Prevent computer from sleeping while processing queue"
        },
        "autoclaude.sleepPrevention.method": {
          "type": "string",
          "enum": [
            "auto",
            "caffeinate",
            "powershell",
            "systemd-inhibit"
          ],
          "default": "auto",
          "description": "Method to use for sleep prevention"
        },
        "autoclaude.history.maxRuns": {
          "type": "number",
          "default": 20,
          "minimum": 1,
          "maximum": 100,
          "description": "Maximum number of history runs to keep"
        },
        "autoclaude.history.autoSave": {
          "type": "boolean",
          "default": true,
          "description": "Automatically save workspace history"
        },
        "autoclaude.history.persistPendingQueue": {
          "type": "boolean",
          "default": true,
          "description": "Save pending messages to survive VS Code restart"
        },
        "autoclaude.history.showInUI": {
          "type": "boolean",
          "default": false,
          "description": "Show history section in the AutoClaude interface"
        },
        "autoclaude.security.allowDangerousXssbypass": {
          "type": "boolean",
          "default": false,
          "description": "‚ö†Ô∏è DANGER: Allow bypassing XSS protection in webview content. Only enable if you trust all message content and understand the security risks."
        },
        "autoclaude.scriptRunner.maxIterations": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 20,
          "description": "Maximum number of iterations for script check loop"
        },
        "autoclaude.scriptRunner.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable script runner functionality"
        },
        "autoclaude.scriptRunner.autoCreateFolder": {
          "type": "boolean",
          "default": true,
          "description": "Automatically create .autoclaude folder when starting"
        },
        "autoclaude.subAgents.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable the intelligent sub-agent system for script checks. When enabled, scripts become Claude-powered sub-agents that can analyze, fix, and improve code intelligently."
        },
        "autoclaude.subAgents.showCapabilities": {
          "type": "boolean",
          "default": true,
          "description": "Show sub-agent capabilities in the UI when hovering over scripts"
        },
        "autoclaude.parallelAgents.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable parallel agent orchestration for large-scale automated improvements"
        },
        "autoclaude.parallelAgents.maxAgents": {
          "type": "number",
          "default": 50,
          "minimum": 1,
          "maximum": 100,
          "description": "Maximum number of parallel agents allowed"
        },
        "autoclaude.parallelAgents.defaultAgents": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 50,
          "description": "Default number of agents to start"
        },
        "autoclaude.parallelAgents.staggerDelay": {
          "type": "number",
          "default": 10,
          "minimum": 1,
          "maximum": 60,
          "description": "Delay in seconds between starting each agent"
        },
        "autoclaude.parallelAgents.contextThreshold": {
          "type": "number",
          "default": 20,
          "minimum": 10,
          "maximum": 50,
          "description": "Context usage percentage threshold for auto-clearing"
        },
        "autoclaude.parallelAgents.autoRestart": {
          "type": "boolean",
          "default": true,
          "description": "Automatically restart agents that fail or go idle"
        },
        "autoclaude.parallelAgents.checkInterval": {
          "type": "number",
          "default": 10,
          "minimum": 5,
          "maximum": 60,
          "description": "Health check interval in seconds"
        },
        "autoclaude.parallelAgents.coordinationEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable advanced coordination protocol for cooperating agents"
        },
        "autoclaude.parallelAgents.autoStart": {
          "type": "boolean",
          "default": true,
          "description": "Automatically start parallel agents when workspace opens"
        },
        "autoclaude.parallelAgents.autoDetectWork": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detect and distribute work to agents"
        },
        "autoclaude.parallelAgents.autoGenerate": {
          "type": "boolean",
          "default": true,
          "description": "Automatically generate context-specific agents based on task complexity"
        },
        "autoclaude.parallelAgents.builtInAgents.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable built-in specialized agents (code analyzer, test generator, etc.)"
        },
        "autoclaude.parallelAgents.builtInAgents.types": {
          "type": "array",
          "default": [
            "code-analyzer",
            "documentation-writer",
            "test-generator",
            "refactor-specialist",
            "security-auditor"
          ],
          "description": "Types of built-in agents to enable",
          "items": {
            "type": "string",
            "enum": [
              "code-analyzer",
              "documentation-writer",
              "test-generator",
              "refactor-specialist",
              "security-auditor",
              "rust-specialist",
              "dotnet-expert",
              "java-architect",
              "golang-engineer",
              "c-systems-programmer",
              "cpp-performance-expert"
            ]
          }
        },
        "autoclaude.parallelAgents.contextGeneration.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic generation of context-specific agents"
        },
        "autoclaude.parallelAgents.contextGeneration.minComplexity": {
          "type": "number",
          "default": 2,
          "minimum": 1,
          "maximum": 10,
          "description": "Minimum task complexity score to trigger agent generation"
        },
        "autoclaude.parallelAgents.contextGeneration.maxGeneratedAgents": {
          "type": "number",
          "default": 10,
          "minimum": 1,
          "maximum": 20,
          "description": "Maximum number of context-specific agents to generate"
        },
        "autoclaude.parallelAgents.autoScale": {
          "type": "boolean",
          "default": true,
          "description": "Automatically scale agent count based on workload"
        },
        "autoclaude.parallelAgents.autoShutdown": {
          "type": "boolean",
          "default": true,
          "description": "Automatically shutdown agents when work is complete"
        },
        "autoclaude.parallelAgents.workDetectionInterval": {
          "type": "number",
          "default": 60,
          "minimum": 10,
          "maximum": 600,
          "description": "Interval in seconds to check for new work"
        }
      }
    },
    "keybindings": [
      {
        "command": "autoclaude.addMessage",
        "key": "ctrl+shift+m",
        "mac": "cmd+shift+m",
        "when": "activePanel == 'autoclaude'"
      },
      {
        "command": "autoclaude.start",
        "key": "ctrl+shift+s",
        "mac": "cmd+shift+s",
        "when": "activePanel == 'autoclaude'"
      },
      {
        "command": "autoclaude.stop",
        "key": "ctrl+shift+x",
        "mac": "cmd+shift+x",
        "when": "activePanel == 'autoclaude'"
      },
      {
        "command": "autoclaude.useTemplate",
        "key": "ctrl+shift+t",
        "mac": "cmd+shift+t",
        "when": "activePanel == 'autoclaude'"
      },
      {
        "command": "autoclaude.showStatistics",
        "key": "ctrl+shift+d",
        "mac": "cmd+shift+d",
        "when": "activePanel == 'autoclaude'"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile:production",
    "compile": "node esbuild.js",
    "compile:production": "node esbuild.js --production",
    "watch": "node esbuild.js --watch",
    "compile:tsc": "tsc -p ./ && cp src/claude_pty_wrapper.py out/claude/session/ && cp -r src/webview out/",
    "watch:tsc": "tsc -watch -p ./",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest --testPathPattern=integration",
    "test:unit": "jest --testPathPattern=\"(simple|id-generator)\\.test\\.ts\"",
    "test:production": "jest --testPathPattern=\"(simple|id-generator)\\.test\\.ts\"",
    "package": "npx @vscode/vsce package --no-dependencies",
    "package:pre-release": "npx @vscode/vsce package --no-dependencies --pre-release",
    "publish": "npx @vscode/vsce publish",
    "prepackage": "npm run compile",
    "release": "npm run compile && npm run package"
  },
  "devDependencies": {
    "@jest/globals": "^29.7.0",
    "@types/jest": "^29.5.5",
    "@types/node": "16.x",
    "@types/vscode": "^1.74.0",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.8",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "typescript": "^4.9.4"
  },
  "keywords": [
    "claude",
    "claude-code",
    "ai",
    "automation",
    "queue",
    "task-management",
    "productivity",
    "development",
    "anthropic",
    "workflow",
    "assistant",
    "code-quality",
    "batch-processing",
    "workflow-automation",
    "vscode-extension"
  ],
  "author": "Claude Code Community",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/claude-code/claude-autopilot"
  },
  "homepage": "https://github.com/claude-code/claude-autopilot#readme",
  "bugs": {
    "url": "https://github.com/claude-code/claude-autopilot/issues"
  },
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "dependencies": {}
}
